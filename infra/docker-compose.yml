# infra/docker-compose.yml
services:
  mongo:
    image: mongo:7
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks: [mindecho_net]
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 })'"]
      interval: 10s
      timeout: 5s
      retries: 10

  api:
    build:
      context: ../backend
    container_name: api
    # Lee el .env del backend (recomendado)
    env_file:
      - ../backend/.env
    # Si prefieres inyectarlo desde infra/.env, podr√≠as usar:
    # environment:
    #   MONGO_URI: ${MONGO_URI}
    #   PORT: ${PORT:-3000}
    #   NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks: [mindecho_net]
    volumes:
      - ../backend:/app
      - api_node_modules:/app/node_modules
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/?authSource=admin
    networks: [mindecho_net]

volumes:
  mongo_data:
  api_node_modules:

networks:
  mindecho_net:
    driver: bridge
