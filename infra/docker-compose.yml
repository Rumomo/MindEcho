# docker-compose.yml (en /infra)
services:
  mongo:
    image: mongo:6.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks: [mindecho_net]
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "mongodb://$${MONGO_INITDB_ROOT_USERNAME}:$${MONGO_INITDB_ROOT_PASSWORD}@localhost:27017/admin?authSource=admin", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-express:
    image: mongo-express:1.0.2-20
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - mongo
    networks: [mindecho_net]

  api:
    build:
      context: ../backend
      dockerfile: Dockerfile
    restart: unless-stopped
    # ðŸ‘‰ instala devDependencies en el volumen y arranca nodemon
    command: sh -c "npm ci --include=dev && npm run dev"
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    volumes:
      - ../backend:/app:delegated           # cÃ³digo en hot-reload
      - api_node_modules:/app/node_modules  # deps dentro del contenedor
    depends_on:
      - mongo
    networks: [mindecho_net]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongo_data:
  api_node_modules:

networks:
  mindecho_net:
    driver: bridge
